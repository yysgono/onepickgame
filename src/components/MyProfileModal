// src/components/MyProfileModal.jsx

import React, { useState } from "react";
import { supabase } from "../utils/supabaseClient";

export default function MyProfileModal({ user, nickname, onClose, onNicknameChange }) {
  const [newNick, setNewNick] = useState(nickname);
  const [message, setMessage] = useState("");
  const [changing, setChanging] = useState(false);

  // 닉네임 변경
  async function handleChangeNick(e) {
    e.preventDefault();
    setChanging(true);
    setMessage("");
    if (!newNick.trim()) {
      setMessage("닉네임을 입력하세요.");
      setChanging(false);
      return;
    }
    const { error } = await supabase
      .from("profiles")
      .update({ nickname: newNick })
      .eq("id", user.id);
    if (error) {
      setMessage("닉네임 변경 실패: " + error.message);
    } else {
      setMessage("닉네임이 변경되었습니다.");
      onNicknameChange(newNick);
    }
    setChanging(false);
  }

  // 회원탈퇴
  async function handleDeleteAccount() {
    if (!window.confirm("정말 회원탈퇴 하시겠습니까? 모든 정보가 삭제됩니다.")) return;
    // Supabase에서는 직접 탈퇴 API가 없음 → 관리자는 Supabase 대시보드에서 탈퇴처리.
    setMessage("회원탈퇴는 관리자에게 문의해 주세요.");
  }

  // 비밀번호 변경은 이메일로 리셋링크 보내는 방법(보안상 직접 변경 불가) → 아래 버튼 예시만 제공
  async function handlePasswordReset() {
    if (!user?.email) return;
    const { error } = await supabase.auth.resetPasswordForEmail(user.email, {
      redirectTo: window.location.origin + "/reset-password"
    });
    setMessage(error ? error.message : "비밀번호 재설정 메일을 전송했습니다.");
  }

  return (
    <div style={modalOverlayStyle}>
      <div style={modalContentStyle} onClick={e => e.stopPropagation()}>
        <h3 style={{ fontWeight: 800, fontSize: 22, marginBottom: 16 }}>내 정보 수정</h3>
        <form onSubmit={handleChangeNick} style={{ marginBottom: 12 }}>
          <input
            value={newNick}
            onChange={e => setNewNick(e.target.value)}
            placeholder="닉네임"
            style={{
              width: "100%", padding: 10, borderRadius: 7,
              border: "1.2px solid #bbb", fontSize: 16, marginBottom: 8
            }}
          />
          <button type="submit" disabled={changing} style={{
            background: "#1976ed", color: "#fff", border: "none", borderRadius: 8,
            fontWeight: 700, fontSize: 16, padding: "9px 0", width: "100%"
          }}>
            {changing ? "변경 중..." : "닉네임 변경"}
          </button>
        </form>
        <button onClick={handlePasswordReset} style={{
          width: "100%", marginBottom: 10,
          background: "#aaa", color: "#fff", border: "none", borderRadius: 7, padding: "9px 0"
        }}>
          비밀번호 변경(메일 전송)
        </button>
        <button onClick={handleDeleteAccount} style={{
          width: "100%", background: "#d33", color: "#fff", border: "none",
          borderRadius: 7, padding: "9px 0", marginBottom: 8
        }}>
          회원탈퇴
        </button>
        <div style={{ color: "#d33", marginTop: 6, minHeight: 18, textAlign: "center" }}>{message}</div>
        <button onClick={onClose} style={{
          width: "100%", marginTop: 8, background: "#eee", border: "none", borderRadius: 8, padding: "9px 0"
        }}>닫기</button>
      </div>
    </div>
  );
}

const modalOverlayStyle = {
  position: "fixed", left: 0, top: 0, width: "100vw", height: "100vh",
  background: "rgba(0,0,0,0.3)", zIndex: 9999, display: "flex", alignItems: "center", justifyContent: "center"
};
const modalContentStyle = {
  background: "#fff", borderRadius: 12, padding: 32, minWidth: 330, maxWidth: 380,
  width: "100%", boxShadow: "0 4px 24px rgba(0,0,0,0.15)", display: "flex",
  flexDirection: "column", gap: 14, alignItems: "center", boxSizing: "border-box",
};
